{"version":3,"sources":["hooks/use-persisted-config.ts","hooks/use-ai-pilot.ts","hooks/use-simulator.ts","components/AiDiag.tsx","components/TargetSpeedSetter.tsx","components/AiPilot.tsx","components/DumbAutoPilot.tsx","hooks/use-dumb-autopilot.ts","components/PidControls.tsx","components/PidDiag.tsx","components/PidPilot.tsx","hooks/use-pid-autopilot.ts","hooks/use-adjusted-time.ts","components/ControlPanel.tsx","components/Environment.tsx","components/RealtimeChart.tsx","hooks/use-tracking-history.ts","components/Graphics.tsx","App.tsx","reportWebVitals.ts","MasterPage.tsx","index.tsx"],"names":["usePersistConfig","key","value","restore","useEffect","ls","localStorage","getItem","JSON","parse","setItem","stringify","LearningMode","normalizeError","error","useAiPilot","simulator","targetSpeed","learningMode","trainingData","useRef","netRef","NeuralNetwork","errorsRef","lastStateRef","throttleToBeApplied","lastState","current","currentError","speed","data","input","output","explore","continuous","push","train","errorThresh","net","initMode","minError","bestThrottle","errors","throttle","run","Math","abs","random","detectThrottle","setThrottle","simTime","dataPoints","length","INTERVAL","angle","wind","horsePower","isPaused","useSimulator","useState","setData","interval","setInterval","oldSim","impact","cumulative","getWindImpact","max","clearInterval","setWind","setAngle","setHorsePower","setIsPaused","AiDiag","props","options","useMemo","chart","height","type","animations","enabled","easing","dynamicAnimation","toolbar","show","zoom","dataLabels","stroke","curve","title","text","align","markers","size","xaxis","yaxis","min","labels","formatter","v","round","toString","legend","series","name","expectedErrors","TargetSpeedSetter","changeSpeed","wrap","onChange","style","width","onClick","AiPilot","setTargetSpeed","setLearningMode","direction","Group","e","target","off","DumbAutoPilot","floor","useDumbAutopilot","PidControls","autopilot","config","setCoeficients","p","step","maxWidth","i","d","PidDiag","integral","derivative","PidPilot","time","state","setState","oldState","useCallback","usePidAutopilot","currentSpeed","startTime","Date","hitCount","endTime","undefined","newState","adjustingTime","differenceInSeconds","useAdjustTime","ControlPanel","controlMode","setControlMode","disabled","Environment","RealtimeChartPure","oldData","useTrackHistory","currentValue","range","RealtimeChart","memo","prev","next","Graphics","App","gutter","span","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","MasterPage","className","Header","theme","mode","defaultSelectedKeys","Item","Content","padding","children","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.748a4eb5.chunk.js","sourcesContent":["import { useEffect } from 'react';\n\nexport function usePersistConfig<T>(\n  key: string,\n  value: T,\n  restore: (value: T) => void,\n) {\n  useEffect(() => {\n    const ls = localStorage.getItem(key);\n    if (ls) {\n      restore(JSON.parse(ls));\n    }\n  }, [key]);\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n}\n","import {\n  INeuralNetworkTrainingData,\n  NeuralNetwork,\n  NeuralNetworkInput,\n} from 'brain.js/src/index';\nimport { useEffect, useRef } from 'react';\nimport { SimulatorHook } from './use-simulator';\n\nexport enum LearningMode {\n  explore = 1,\n  continuous = 2,\n  off = 3,\n}\n\nfunction normalizeError(error: number) {\n  if (error > 50) {\n    return 1;\n  }\n  if (error < -50) {\n    return 0;\n  }\n\n  return (error + 50) / 100;\n}\n\nfunction detectThrottle(\n  net: NeuralNetwork,\n  currentError: number,\n  initMode: boolean,\n) {\n  let minError = 100000;\n  let bestThrottle = 0;\n  const errors: number[] = [];\n\n  for (let throttle = 0; throttle <= 100; throttle++) {\n    const input: NeuralNetworkInput = [\n      normalizeError(currentError),\n      throttle / 100,\n    ];\n    const output = net.run(input);\n\n    const error = Math.abs(output[0] - 0.5);\n    if (error < minError) {\n      minError = error;\n      bestThrottle = throttle;\n    }\n\n    errors.push(error);\n  }\n\n  if (initMode) {\n    bestThrottle = Math.random() * 100;\n  }\n\n  return {\n    throttle: bestThrottle,\n    errors,\n  };\n}\n\nexport function useAiPilot(\n  simulator: SimulatorHook,\n  targetSpeed: number,\n  learningMode: LearningMode,\n) {\n  const trainingData = useRef<INeuralNetworkTrainingData[]>([]);\n  const netRef = useRef<NeuralNetwork>(new NeuralNetwork());\n  const errorsRef = useRef<number[]>([]);\n\n  const lastStateRef = useRef({\n    error: 0,\n    throttleToBeApplied: 0,\n  });\n\n  useEffect(() => {\n    const lastState = lastStateRef.current;\n    const currentError = targetSpeed - simulator.speed;\n    const data: INeuralNetworkTrainingData = {\n      input: [\n        normalizeError(lastState.error),\n        lastState.throttleToBeApplied / 100,\n      ],\n      output: [normalizeError(currentError)],\n    };\n\n    if (\n      learningMode === LearningMode.explore ||\n      learningMode === LearningMode.continuous\n    ) {\n      trainingData.current.push(data);\n      netRef.current.train(trainingData.current, {\n        errorThresh: 0.005,\n      });\n    }\n\n    const { throttle, errors } = detectThrottle(\n      netRef.current!,\n      currentError,\n      learningMode === LearningMode.explore,\n    );\n\n    errorsRef.current = errors;\n\n    lastStateRef.current = {\n      error: currentError,\n      throttleToBeApplied: throttle,\n    };\n\n    simulator.setThrottle(throttle);\n  }, [simulator.simTime]);\n\n  return { errors: errorsRef.current, dataPoints: trainingData.current.length };\n}\n","import { useEffect, useState } from 'react';\n\nexport interface Simulator {\n  throttle: number;\n  wind: number;\n  angle: number;\n  speed: number;\n  simTime: number;\n  horsePower: number;\n  isPaused: boolean;\n}\n\nexport const INTERVAL = 300;\n\nfunction getWindImpact(speed: number, wind: number) {\n  const cumulative = speed + wind;\n  return (cumulative * cumulative) / 4000 / (1000 / INTERVAL);\n}\n\nfunction getOtherImpact() {\n  return 2 / (1000 / INTERVAL);\n}\n\nfunction getAngleImpact(angle: number) {\n  return angle / (1000 / INTERVAL);\n}\n\nfunction getThrottleImpact(\n  horsePower: number,\n  speed: number,\n  throttle: number,\n) {\n  const power = 600 * (300 / horsePower);\n  return ((300 - speed) * throttle) / power / (1000 / INTERVAL);\n}\n\nlet simulator: Simulator = {\n  throttle: 0,\n  angle: 0,\n  speed: 0,\n  simTime: 0,\n  wind: 20,\n  horsePower: 200,\n  isPaused: false,\n};\n\nexport interface SimulatorHook extends Simulator {\n  setThrottle(value: number): void;\n  setWind(value: number): void;\n  setAngle(value: number): void;\n  setHorsePower(value: number): void;\n  setIsPaused(value: boolean): void;\n}\nexport function useSimulator(): SimulatorHook {\n  const [data, setData] = useState<Simulator>(simulator);\n\n  useEffect(() => {\n    if (data.isPaused) {\n      return undefined;\n    }\n\n    const interval = setInterval(() => {\n      setData((oldSim) => {\n        const impact =\n          getThrottleImpact(oldSim.horsePower, oldSim.speed, oldSim.throttle) -\n          getOtherImpact() -\n          getWindImpact(oldSim.speed, oldSim.wind) -\n          getAngleImpact(oldSim.angle);\n\n        return {\n          ...oldSim,\n          simTime: oldSim.simTime + 1,\n          speed: Math.max(0, oldSim.speed + impact),\n        };\n      });\n    }, INTERVAL);\n\n    return function cleanup() {\n      clearInterval(interval);\n    };\n  }, [data.isPaused]);\n\n  function setThrottle(value: number) {\n    setData((oldSim) => {\n      return {\n        ...oldSim,\n        throttle: value,\n      };\n    });\n  }\n\n  function setWind(value: number) {\n    setData((oldSim) => {\n      return {\n        ...oldSim,\n        wind: value,\n      };\n    });\n  }\n\n  function setAngle(value: number) {\n    setData((oldSim) => {\n      return {\n        ...oldSim,\n        angle: value,\n      };\n    });\n  }\n\n  function setHorsePower(value: number) {\n    setData((oldSim) => {\n      return {\n        ...oldSim,\n        horsePower: value,\n      };\n    });\n  }\n\n  function setIsPaused(value: boolean) {\n    setData((oldSim) => {\n      return {\n        ...oldSim,\n        isPaused: value,\n      };\n    });\n  }\n\n  return {\n    ...data,\n    setThrottle,\n    setWind,\n    setAngle,\n    setHorsePower,\n    setIsPaused,\n  };\n}\n","import { ApexOptions } from 'apexcharts';\nimport React, { useMemo } from 'react';\nimport ApexCharts from 'react-apexcharts';\nimport { INTERVAL } from '../hooks/use-simulator';\n\ninterface AiDiagProps {\n  expectedErrors: number[];\n}\nexport function AiDiag(props: AiDiagProps) {\n  const options: ApexOptions = useMemo(() => {\n    return {\n      chart: {\n        height: 350,\n        type: 'line',\n        animations: {\n          enabled: true,\n          easing: 'linear',\n          dynamicAnimation: {\n            speed: INTERVAL - 20,\n          },\n        },\n        toolbar: {\n          show: false,\n        },\n        zoom: {\n          enabled: false,\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n      stroke: {\n        curve: 'smooth',\n      },\n      title: {\n        text: 'AI diagnosis',\n        align: 'left',\n      },\n      markers: {\n        size: 0,\n      },\n      xaxis: {\n        type: 'numeric',\n      },\n      yaxis: {\n        max: 0.5,\n        min: 0,\n        labels: {\n          formatter: (v: number) => {\n            return (Math.round(v * 10) / 10).toString();\n          },\n        },\n      },\n      legend: {\n        show: false,\n      },\n    };\n  }, []);\n\n  const series = [\n    {\n      name: 'series-1',\n      data: props.expectedErrors,\n    },\n  ];\n\n  return (\n    <ApexCharts options={options} series={series} type=\"line\" height={350} />\n  );\n}\n","import { Button, Slider, Space } from 'antd';\nimport React from 'react';\n\ninterface TargetSpeedSetterProps {\n  targetSpeed: number;\n  changeSpeed(speed: number): void;\n}\nexport function TargetSpeedSetter(props: TargetSpeedSetterProps) {\n  const { targetSpeed, changeSpeed } = props;\n\n  return (\n    <>\n      <div>Target speed: {targetSpeed}</div>\n      <Space wrap>\n        <Slider\n          min={0}\n          max={200}\n          onChange={changeSpeed}\n          value={targetSpeed}\n          style={{ width: 200 }}\n        />\n        <Button onClick={() => changeSpeed(50)}>50</Button>\n        <Button onClick={() => changeSpeed(70)}>70</Button>\n        <Button onClick={() => changeSpeed(90)}>90</Button>\n        <Button onClick={() => changeSpeed(130)}>130</Button>\n      </Space>\n    </>\n  );\n}\n","import { Card, Radio, Space } from 'antd';\nimport React, { useState } from 'react';\nimport { LearningMode, useAiPilot } from '../hooks/use-ai-pilot';\nimport { SimulatorHook } from '../hooks/use-simulator';\nimport { AiDiag } from './AiDiag';\nimport { TargetSpeedSetter } from './TargetSpeedSetter';\n\ninterface AiPilotProps {\n  simulator: SimulatorHook;\n}\nexport function AiPilot({ simulator }: AiPilotProps) {\n  const [targetSpeed, setTargetSpeed] = useState(70);\n  const [learningMode, setLearningMode] = useState<LearningMode>(\n    LearningMode.explore,\n  );\n\n  const { errors, dataPoints } = useAiPilot(\n    simulator,\n    targetSpeed,\n    learningMode,\n  );\n\n  return (\n    <Space direction=\"vertical\" style={{ width: '100%' }}>\n      <Card title=\"Autopilot\">\n        <TargetSpeedSetter\n          changeSpeed={setTargetSpeed}\n          targetSpeed={targetSpeed}\n        ></TargetSpeedSetter>\n\n        <Radio.Group\n          onChange={(e) => setLearningMode(e.target.value)}\n          value={learningMode}\n        >\n          <Radio value={LearningMode.explore}>Explore</Radio>\n          <Radio value={LearningMode.continuous}>Continuous learning</Radio>\n          <Radio value={LearningMode.off}>Learning off</Radio>\n        </Radio.Group>\n      </Card>\n      <Card>Data points: {dataPoints}</Card>\n      <Card>\n        <AiDiag expectedErrors={errors} />\n      </Card>\n    </Space>\n  );\n}\n","import { Card } from 'antd';\nimport React, { useState } from 'react';\nimport { useDumbAutopilot } from '../hooks/use-dumb-autopilot';\nimport { SimulatorHook } from '../hooks/use-simulator';\nimport { TargetSpeedSetter } from './TargetSpeedSetter';\n\ninterface AutoPilotProps {\n  simulator: SimulatorHook;\n}\nexport function DumbAutoPilot({ simulator }: AutoPilotProps) {\n  const { speed } = simulator;\n\n  const [targetSpeed, setTargetSpeed] = useState(Math.floor(speed));\n\n  useDumbAutopilot(simulator, targetSpeed);\n\n  return (\n    <Card title=\"Dumb Autopilot\">\n      <TargetSpeedSetter\n        targetSpeed={targetSpeed}\n        changeSpeed={setTargetSpeed}\n      ></TargetSpeedSetter>\n    </Card>\n  );\n}\n","import { useEffect } from 'react';\nimport { SimulatorHook } from './use-simulator';\n\nexport function useDumbAutopilot(\n  simulator: SimulatorHook,\n  targetSpeed: number,\n) {\n  useEffect(() => {\n    if (simulator.speed > targetSpeed) {\n      simulator.setThrottle(0);\n    } else if (simulator.speed < targetSpeed) {\n      simulator.setThrottle(100);\n    }\n  }, [simulator.simTime]);\n}\n","import { Card, Slider } from 'antd';\nimport React from 'react';\nimport { usePersistConfig } from '../hooks/use-persisted-config';\nimport { AutopilotHook } from '../hooks/use-pid-autopilot';\n\ninterface PidDiagProps {\n  autopilot: AutopilotHook;\n}\nexport function PidControls({ autopilot }: PidDiagProps) {\n  const { config } = autopilot;\n\n  usePersistConfig('pid-controls', config, autopilot.setCoeficients);\n\n  return (\n    <Card title=\"PID Coeficients\">\n      <div>p: {config.p}</div>\n      <Slider\n        min={0}\n        max={40}\n        step={0.01}\n        onChange={(v: number) => autopilot.setCoeficients({ ...config, p: v })}\n        value={config.p}\n        style={{ width: 400, maxWidth: '100%' }}\n      />\n      <div>i: {config.i}</div>\n      <Slider\n        min={0}\n        max={10}\n        step={0.01}\n        onChange={(v: number) => autopilot.setCoeficients({ ...config, i: v })}\n        value={config.i}\n        style={{ width: 400, maxWidth: '100%' }}\n      />\n      <div>d: {config.d}</div>\n      <Slider\n        min={0}\n        max={10}\n        step={0.01}\n        onChange={(v: number) => autopilot.setCoeficients({ ...config, d: v })}\n        value={config.d}\n        style={{ width: 400, maxWidth: '100%' }}\n      />\n    </Card>\n  );\n}\n","import { Card } from 'antd';\nimport React from 'react';\nimport { AutopilotHook } from '../hooks/use-pid-autopilot';\n\ninterface PidControlsProps {\n  autopilot: AutopilotHook;\n}\nexport function PidDiag({ autopilot }: PidControlsProps) {\n  return (\n    <Card title=\"PID Diag\">\n      <div> Error: {autopilot.error}</div>\n      <div> Integral: {autopilot.integral}</div>\n      <div> Derivative: {autopilot.derivative}</div>\n      <div> Output: {autopilot.output}</div>\n    </Card>\n  );\n}\n","import { Card, Space } from 'antd';\nimport React, { useState } from 'react';\nimport { useAdjustTime } from '../hooks/use-adjusted-time';\nimport { usePidAutopilot } from '../hooks/use-pid-autopilot';\nimport { SimulatorHook } from '../hooks/use-simulator';\nimport { PidControls } from './PidControls';\nimport { PidDiag } from './PidDiag';\nimport { TargetSpeedSetter } from './TargetSpeedSetter';\n\ninterface PidPilotProps {\n  simulator: SimulatorHook;\n}\nexport function PidPilot({ simulator }: PidPilotProps) {\n  const { speed, simTime: time } = simulator;\n\n  const [targetSpeed, setTargetSpeed] = useState(Math.floor(speed));\n\n  const autopilot = usePidAutopilot(simulator, targetSpeed);\n\n  const { adjustingTime, hitCount } = useAdjustTime(targetSpeed, speed, time);\n\n  return (\n    <Space direction=\"vertical\" style={{ width: '100%' }}>\n      <Card title=\"Autopilot\">\n        <TargetSpeedSetter\n          changeSpeed={setTargetSpeed}\n          targetSpeed={targetSpeed}\n        ></TargetSpeedSetter>\n        <div>\n          Adjusting time: {adjustingTime}\n          {'seconds '}\n          {hitCount && <span>(hit: {hitCount})</span>}\n        </div>\n      </Card>\n      <PidDiag autopilot={autopilot}></PidDiag>\n      <PidControls autopilot={autopilot}></PidControls>\n    </Space>\n  );\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { INTERVAL, SimulatorHook } from './use-simulator';\n\ninterface AutopilotState {\n  error: number;\n  integral: number;\n  derivative: number;\n  output: number;\n  config: PidConfig;\n}\n\nexport interface PidConfig {\n  p: number;\n  i: number;\n  d: number;\n}\n\nexport interface AutopilotHook extends AutopilotState {\n  setCoeficients(config: PidConfig): void;\n}\n\nconst TIME_DIFF = INTERVAL / 1000;\n\nexport function usePidAutopilot(\n  simulator: SimulatorHook,\n  targetSpeed: number,\n): AutopilotHook {\n  const [state, setState] = useState<AutopilotState>({\n    error: 0,\n    integral: 0,\n    derivative: 0,\n    output: 0,\n    config: {\n      d: 1,\n      i: 1,\n      p: 1,\n    },\n  });\n\n  useEffect(() => {\n    const config = state.config;\n    const error = targetSpeed - simulator.speed;\n    const integral = state.integral + error * TIME_DIFF;\n    const derivative = (error - state.error) / TIME_DIFF;\n    const output =\n      config.p * error + config.i * integral + config.d * derivative;\n\n    setState((oldState) => {\n      return { ...oldState, error, integral, derivative, output };\n    });\n  }, [simulator.simTime]);\n\n  useEffect(() => {\n    simulator.setThrottle(Math.min(100, Math.max(0, state.output)));\n  }, [state.output]);\n\n  const setCoeficients = useCallback(\n    (config: PidConfig) => {\n      setState((oldState) => {\n        return { ...oldState, config };\n      });\n    },\n    [setState],\n  );\n\n  return {\n    ...state,\n    setCoeficients,\n  };\n}\n","import { differenceInSeconds } from 'date-fns';\nimport { useEffect, useMemo, useState } from 'react';\n\ninterface AdjustTimeState {\n  startTime: Date;\n  endTime?: Date;\n  hitCount: number;\n}\nexport function useAdjustTime(\n  targetSpeed: number,\n  currentSpeed: number,\n  simTime: number,\n) {\n  const [state, setState] = useState<AdjustTimeState>({\n    startTime: new Date(),\n    hitCount: 0,\n  });\n\n  useEffect(() => {\n    setState((oldState) => {\n      return {\n        ...oldState,\n        startTime: new Date(),\n        endTime: undefined,\n        hitCount: 0,\n      };\n    });\n  }, [targetSpeed]);\n\n  useEffect(() => {\n    if (Math.abs(targetSpeed - currentSpeed) < 0.5) {\n      setState((oldState) => {\n        const newState = {\n          ...oldState,\n          hitCount: oldState.hitCount + 1,\n        };\n        if (newState.hitCount === 1) {\n          newState.endTime = new Date();\n        }\n\n        return newState;\n      });\n    } else if (state.hitCount > 0) {\n      setState((oldState) => {\n        return { ...oldState, endTime: undefined, hitCount: 0 };\n      });\n    }\n  }, [simTime]);\n\n  const adjustingTime = useMemo(() => {\n    if (state.endTime) {\n      return differenceInSeconds(state.endTime, state.startTime);\n    }\n\n    return differenceInSeconds(new Date(), state.startTime);\n  }, [simTime]);\n  return { adjustingTime, hitCount: state.hitCount };\n}\n","import { Card, Radio, Slider, Space } from 'antd';\nimport React, { useState } from 'react';\nimport { usePersistConfig } from '../hooks/use-persisted-config';\nimport { SimulatorHook } from '../hooks/use-simulator';\nimport { AiPilot } from './AiPilot';\nimport { DumbAutoPilot } from './DumbAutoPilot';\nimport { PidPilot } from './PidPilot';\n\ninterface ControlPanelProps {\n  simulator: SimulatorHook;\n}\nexport function ControlPanel({ simulator }: ControlPanelProps) {\n  const { throttle, setThrottle } = simulator;\n  const [controlMode, setControlMode] = useState(1);\n\n  usePersistConfig('control-mode', controlMode, setControlMode);\n\n  return (\n    <Space direction=\"vertical\" style={{ width: '100%' }}>\n      <Card>\n        Mode:\n        <Radio.Group\n          onChange={(e) => setControlMode(e.target.value)}\n          value={controlMode}\n        >\n          <Radio value={1}>Manual</Radio>\n          <Radio value={2}>Dumb Autopilot</Radio>\n          <Radio value={3}>Autopilot</Radio>\n          <Radio value={4}>AI pilot</Radio>\n        </Radio.Group>\n        <Space style={{ width: '100%' }}>\n          Throttle:\n          <Slider\n            disabled={controlMode !== 1}\n            min={1}\n            max={100}\n            onChange={setThrottle}\n            value={throttle}\n            style={{ width: 200 }}\n          />\n        </Space>\n      </Card>\n      {controlMode === 2 && (\n        <DumbAutoPilot simulator={simulator}></DumbAutoPilot>\n      )}\n      {controlMode === 3 && <PidPilot simulator={simulator}></PidPilot>}\n      {controlMode === 4 && <AiPilot simulator={simulator}></AiPilot>}\n    </Space>\n  );\n}\n","import { Button, Card, Slider, Space } from 'antd';\nimport React from 'react';\nimport { usePersistConfig } from '../hooks/use-persisted-config';\nimport { SimulatorHook } from '../hooks/use-simulator';\n\ninterface EnvironmentProps {\n  simulator: SimulatorHook;\n}\nexport function Environment({ simulator }: EnvironmentProps) {\n  const {\n    wind,\n    setWind,\n    angle,\n    setAngle,\n    horsePower,\n    setHorsePower,\n  } = simulator;\n\n  usePersistConfig('wind', wind, setWind);\n  usePersistConfig('angle', angle, setAngle);\n  usePersistConfig('horsePower', horsePower, setHorsePower);\n\n  return (\n    <Space direction=\"vertical\" style={{ width: '100%' }}>\n      <Card>\n        <Button\n          onClick={() => simulator.setIsPaused(!simulator.isPaused)}\n          style={{ width: '100%' }}\n        >\n          {simulator.isPaused ? 'Continue' : 'Pause'}\n        </Button>\n      </Card>\n      <Card>\n        Horse power: {horsePower}\n        <Slider\n          min={0}\n          max={400}\n          onChange={setHorsePower}\n          value={horsePower}\n          style={{ width: '100%' }}\n        />\n      </Card>\n      <Card>\n        Wind speed: {wind}\n        <Slider\n          min={0}\n          max={150}\n          onChange={setWind}\n          value={wind}\n          style={{ width: '100%' }}\n        />\n      </Card>\n      <Card>\n        Incline: {angle}\n        <Slider\n          min={-25}\n          max={+25}\n          onChange={setAngle}\n          value={angle}\n          style={{ width: '100%' }}\n        />\n      </Card>\n    </Space>\n  );\n}\n","import { ApexOptions } from 'apexcharts';\nimport { memo, useMemo } from 'react';\nimport ApexCharts from 'react-apexcharts';\nimport { INTERVAL } from '../hooks/use-simulator';\nimport { useTrackHistory } from '../hooks/use-tracking-history';\n\ninterface ChartProps {\n  simTime: number;\n  currentValue: number;\n  min?: number;\n  max?: number;\n  title: string;\n}\n\nfunction RealtimeChartPure(props: ChartProps) {\n  const { data } = useTrackHistory(props.simTime, props.currentValue);\n\n  const options: ApexOptions = useMemo(() => {\n    return {\n      chart: {\n        height: 350,\n        type: 'line',\n        animations: {\n          enabled: true,\n          easing: 'linear',\n          dynamicAnimation: {\n            speed: INTERVAL - 20,\n          },\n        },\n        toolbar: {\n          show: false,\n        },\n        zoom: {\n          enabled: false,\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n      stroke: {\n        curve: 'smooth',\n      },\n      title: {\n        text: props.title,\n        align: 'left',\n      },\n      markers: {\n        size: 0,\n      },\n      xaxis: {\n        type: 'numeric',\n        range: 100,\n        // range: XAXISRANGE,\n      },\n      yaxis: {\n        max: props.max,\n        min: props.min,\n      },\n      legend: {\n        show: false,\n      },\n    };\n  }, [props.title, props.min, props.max]);\n\n  const series = [\n    {\n      name: 'series-1',\n      data: data,\n    },\n  ];\n\n  return (\n    <ApexCharts options={options} series={series} type=\"line\" height={350} />\n  );\n}\n\nexport const RealtimeChart = memo(RealtimeChartPure, (prev, next) => {\n  return prev.simTime === next.simTime;\n});\n","import { useEffect, useState } from 'react';\n\nexport function useTrackHistory(simTime: number, value: number) {\n  const [data, setData] = useState([value]);\n\n  useEffect(() => {\n    setData((oldData) => {\n      const newData = [...oldData, Math.floor(value)];\n      return newData;\n    });\n  }, [simTime]);\n\n  return { data };\n}\n","import { Card, Space } from 'antd';\nimport React from 'react';\nimport { RealtimeChart } from './RealtimeChart';\nimport { SimulatorHook } from '../hooks/use-simulator';\n\ninterface GraphicsProps {\n  simulator: SimulatorHook;\n}\nexport function Graphics({ simulator }: GraphicsProps) {\n  const { speed, simTime: time, throttle } = simulator;\n\n  return (\n    <Space direction=\"vertical\" style={{ width: '100%' }}>\n      <Card>\n        <RealtimeChart\n          title={'Speed: ' + Math.round(speed)}\n          simTime={time}\n          currentValue={speed}\n          min={0}\n          max={230}\n        />\n      </Card>\n      <Card>\n        <RealtimeChart\n          title={'Throttle: ' + Math.round(throttle)}\n          simTime={time}\n          currentValue={throttle}\n          min={0}\n          max={100}\n        />\n      </Card>\n    </Space>\n  );\n}\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport './App.css';\nimport { ControlPanel } from './components/ControlPanel';\nimport { Environment } from './components/Environment';\nimport { Graphics } from './components/Graphics';\nimport { useSimulator } from './hooks/use-simulator';\n\nexport function App() {\n  const simulator = useSimulator();\n\n  return (\n    <Row gutter={12}>\n      <Col span={9}>\n        <ControlPanel simulator={simulator}></ControlPanel>\n      </Col>\n      <Col span={3}>\n        <Environment simulator={simulator}></Environment>\n      </Col>\n      <Col span={12}>\n        <Graphics simulator={simulator}></Graphics>\n      </Col>\n    </Row>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Layout, Menu } from 'antd';\nimport React from 'react';\n\nexport function MasterPage(props: any) {\n  return (\n    <Layout className=\"layout\">\n      <Layout.Header>\n        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\n          <Menu.Item key=\"1\">Welcome</Menu.Item>\n        </Menu>\n      </Layout.Header>\n      <Layout.Content style={{ padding: '12px' }}>\n        <div className=\"site-layout-content\">{props.children}</div>\n      </Layout.Content>\n    </Layout>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\nimport { MasterPage } from './MasterPage';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MasterPage>\n      <App />\n    </MasterPage>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}