{"version":3,"sources":["domain/use-persisted-config.ts","domain/use-simulator.ts","components/PidControls.tsx","components/PidDiag.tsx","components/TargetSpeedSetter.tsx","components/AutoPilot.tsx","domain/use-autopilot.ts","domain/use-adjusted-time.ts","components/DumbAutoPilot.tsx","domain/use-dumb-autopilot.ts","components/ControlPanel.tsx","components/Environment.tsx","components/RealtimeChart.tsx","domain/use-tracking-history.ts","components/Graphics.tsx","App.tsx","reportWebVitals.ts","MasterPage.tsx","index.tsx"],"names":["usePersistConfig","key","value","restore","useEffect","ls","localStorage","getItem","JSON","parse","setItem","stringify","INTERVAL","simulator","throttle","angle","speed","simTime","wind","horsePower","isPaused","useSimulator","useState","data","setData","interval","setInterval","oldSim","impact","cumulative","getWindImpact","Math","max","clearInterval","setThrottle","setWind","setAngle","setHorsePower","setIsPaused","PidControls","autopilot","config","setCoeficients","title","p","min","step","onChange","v","style","width","i","d","PidDiag","error","integral","derivative","output","TargetSpeedSetter","props","targetSpeed","changeSpeed","onClick","AutoPilot","time","floor","setTargetSpeed","state","setState","oldState","useCallback","useAutopilot","currentSpeed","startTime","Date","hitCount","endTime","undefined","abs","newState","adjustingTime","useMemo","differenceInSeconds","useAdjustTime","direction","DumbAutoPilot","useDumbAutopilot","ControlPanel","controlMode","setControlMode","Group","e","target","disabled","Environment","RealtimeChartPure","oldData","useTrackHistory","currentValue","options","chart","height","type","animations","enabled","easing","dynamicAnimation","toolbar","show","zoom","dataLabels","stroke","curve","text","align","markers","size","xaxis","range","yaxis","legend","series","name","RealtimeChart","memo","prev","next","Graphics","round","App","gutter","span","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","MasterPage","className","Header","theme","mode","defaultSelectedKeys","Item","Content","padding","children","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60207f12.chunk.js","sourcesContent":["import { useEffect } from 'react';\n\nexport function usePersistConfig<T>(\n  key: string,\n  value: T,\n  restore: (value: T) => void,\n) {\n  useEffect(() => {\n    const ls = localStorage.getItem(key);\n    if (ls) {\n      restore(JSON.parse(ls));\n    }\n  }, [key]);\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n}\n","import { useEffect, useState } from 'react';\n\nexport interface Simulator {\n  throttle: number;\n  wind: number;\n  angle: number;\n  speed: number;\n  simTime: number;\n  horsePower: number;\n  isPaused: boolean;\n}\n\nexport const INTERVAL = 300;\n\nfunction getWindImpact(speed: number, wind: number) {\n  const cumulative = speed + wind;\n  return (cumulative * cumulative) / 4000 / (1000 / INTERVAL);\n}\n\nfunction getOtherImpact() {\n  return 2 / (1000 / INTERVAL);\n}\n\nfunction getAngleImpact(angle: number) {\n  return angle / (1000 / INTERVAL);\n}\n\nfunction getThrottleImpact(\n  horsePower: number,\n  speed: number,\n  throttle: number,\n) {\n  const power = 600 * (300 / horsePower);\n  return ((300 - speed) * throttle) / power / (1000 / INTERVAL);\n}\n\nlet simulator: Simulator = {\n  throttle: 0,\n  angle: 0,\n  speed: 0,\n  simTime: 0,\n  wind: 20,\n  horsePower: 200,\n  isPaused: false,\n};\n\nexport interface SimulatorHook extends Simulator {\n  setThrottle(value: number): void;\n  setWind(value: number): void;\n  setAngle(value: number): void;\n  setHorsePower(value: number): void;\n  setIsPaused(value: boolean): void;\n}\nexport function useSimulator(): SimulatorHook {\n  const [data, setData] = useState<Simulator>(simulator);\n\n  useEffect(() => {\n    if (data.isPaused) {\n      return undefined;\n    }\n\n    const interval = setInterval(() => {\n      setData((oldSim) => {\n        const impact =\n          getThrottleImpact(oldSim.horsePower, oldSim.speed, oldSim.throttle) -\n          getOtherImpact() -\n          getWindImpact(oldSim.speed, oldSim.wind) -\n          getAngleImpact(oldSim.angle);\n\n        return {\n          ...oldSim,\n          simTime: oldSim.simTime + 1,\n          speed: Math.max(0, oldSim.speed + impact),\n        };\n      });\n    }, INTERVAL);\n\n    return function cleanup() {\n      clearInterval(interval);\n    };\n  }, [data.isPaused]);\n\n  function setThrottle(value: number) {\n    setData((oldSim) => {\n      return {\n        ...oldSim,\n        throttle: value,\n      };\n    });\n  }\n\n  function setWind(value: number) {\n    setData((oldSim) => {\n      return {\n        ...oldSim,\n        wind: value,\n      };\n    });\n  }\n\n  function setAngle(value: number) {\n    setData((oldSim) => {\n      return {\n        ...oldSim,\n        angle: value,\n      };\n    });\n  }\n\n  function setHorsePower(value: number) {\n    setData((oldSim) => {\n      return {\n        ...oldSim,\n        horsePower: value,\n      };\n    });\n  }\n\n  function setIsPaused(value: boolean) {\n    setData((oldSim) => {\n      return {\n        ...oldSim,\n        isPaused: value,\n      };\n    });\n  }\n\n  return {\n    ...data,\n    setThrottle,\n    setWind,\n    setAngle,\n    setHorsePower,\n    setIsPaused,\n  };\n}\n","import { Card, Slider } from 'antd';\nimport React, { useEffect } from 'react';\nimport { AutopilotHook } from '../domain/use-autopilot';\nimport { usePersistConfig } from '../domain/use-persisted-config';\n\ninterface PidDiagProps {\n  autopilot: AutopilotHook;\n}\nexport function PidControls({ autopilot }: PidDiagProps) {\n  const { config } = autopilot;\n\n  usePersistConfig('pid-controls', config, autopilot.setCoeficients);\n\n  return (\n    <Card title=\"PID Coeficients\">\n      <div>p: {config.p}</div>\n      <Slider\n        min={0}\n        max={40}\n        step={0.01}\n        onChange={(v: number) => autopilot.setCoeficients({ ...config, p: v })}\n        value={config.p}\n        style={{ width: 400 }}\n      />\n      <div>i: {config.i}</div>\n      <Slider\n        min={0}\n        max={10}\n        step={0.01}\n        onChange={(v: number) => autopilot.setCoeficients({ ...config, i: v })}\n        value={config.i}\n        style={{ width: 400 }}\n      />\n      <div>d: {config.d}</div>\n      <Slider\n        min={0}\n        max={10}\n        step={0.01}\n        onChange={(v: number) => autopilot.setCoeficients({ ...config, d: v })}\n        value={config.d}\n        style={{ width: 400 }}\n      />\n    </Card>\n  );\n}\n","import { Card, Slider } from 'antd';\nimport React, { useEffect } from 'react';\nimport { AutopilotHook } from '../domain/use-autopilot';\nimport { usePersistConfig } from '../domain/use-persisted-config';\n\ninterface PidControlsProps {\n  autopilot: AutopilotHook;\n}\nexport function PidDiag({ autopilot }: PidControlsProps) {\n  return (\n    <Card title=\"PID Diag\">\n      <div> Error: {autopilot.error}</div>\n      <div> Integral: {autopilot.integral}</div>\n      <div> Derivative: {autopilot.derivative}</div>\n      <div> Output: {autopilot.output}</div>\n    </Card>\n  );\n}\n","import { Button, Slider, Space } from 'antd';\nimport React from 'react';\n\ninterface TargetSpeedSetterProps {\n  targetSpeed: number;\n  changeSpeed(speed: number): void;\n}\nexport function TargetSpeedSetter(props: TargetSpeedSetterProps) {\n  const { targetSpeed, changeSpeed } = props;\n\n  return (\n    <>\n      <div>Target speed: {targetSpeed}</div>\n      <Space>\n        <Slider\n          min={0}\n          max={200}\n          onChange={changeSpeed}\n          value={targetSpeed}\n          style={{ width: 200 }}\n        />\n        <Button onClick={() => changeSpeed(50)}>50</Button>\n        <Button onClick={() => changeSpeed(70)}>70</Button>\n        <Button onClick={() => changeSpeed(90)}>90</Button>\n        <Button onClick={() => changeSpeed(130)}>130</Button>\n      </Space>\n    </>\n  );\n}\n","import { Button, Card, Slider, Space } from 'antd';\nimport React, { useState } from 'react';\nimport { useAdjustTime } from '../domain/use-adjusted-time';\nimport { useAutopilot } from '../domain/use-autopilot';\nimport { SimulatorHook } from '../domain/use-simulator';\nimport { PidControls } from './PidControls';\nimport { PidDiag } from './PidDiag';\nimport { TargetSpeedSetter } from './TargetSpeedSetter';\n\ninterface AutoPilotProps {\n  simulator: SimulatorHook;\n}\nexport function AutoPilot({ simulator }: AutoPilotProps) {\n  const { speed, simTime: time } = simulator;\n\n  const [targetSpeed, setTargetSpeed] = useState(Math.floor(speed));\n\n  const autopilot = useAutopilot(simulator, targetSpeed);\n\n  const { adjustingTime, hitCount } = useAdjustTime(targetSpeed, speed, time);\n\n  return (\n    <Space direction=\"vertical\" style={{ width: '100%' }}>\n      <Card title=\"Autopilot\">\n        <TargetSpeedSetter\n          changeSpeed={setTargetSpeed}\n          targetSpeed={targetSpeed}\n        ></TargetSpeedSetter>\n        <div>\n          Adjusting time: {adjustingTime}\n          {'seconds '}\n          {hitCount && <span>(hit: {hitCount})</span>}\n        </div>\n      </Card>\n      <PidDiag autopilot={autopilot}></PidDiag>\n      <PidControls autopilot={autopilot}></PidControls>\n    </Space>\n  );\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { INTERVAL, SimulatorHook } from './use-simulator';\n\n/*\n\n    // the desired value and the actual value\n    const error = setpoint - PV;\n    // track error over time, scaled to the timer interval\n    integral = integral + error * Dt;\n    // determine the amount of change from the last time checked\n    derivative = (error - preError) / Dt;\n    // calculate how much to drive the output in order to get to the\n    // desired setpoint.\n    output = Kp * error + Ki * integral + Kd * derivative;\n    // remember the error for the next time around.\n    preError = error;\n*/\n\ninterface AutopilotState {\n  error: number;\n  integral: number;\n  derivative: number;\n  output: number;\n  config: PidConfig;\n}\n\nexport interface PidConfig {\n  p: number;\n  i: number;\n  d: number;\n}\n\nexport interface AutopilotHook extends AutopilotState {\n  setCoeficients(config: PidConfig): void;\n}\n\nconst TIME_DIFF = INTERVAL / 1000;\n\nexport function useAutopilot(\n  simulator: SimulatorHook,\n  targetSpeed: number,\n): AutopilotHook {\n  const [state, setState] = useState<AutopilotState>({\n    error: 0,\n    integral: 0,\n    derivative: 0,\n    output: 0,\n    config: {\n      d: 1,\n      i: 1,\n      p: 1,\n    },\n  });\n\n  useEffect(() => {\n    const config = state.config;\n    const error = targetSpeed - simulator.speed;\n    const integral = state.integral + error * TIME_DIFF;\n    const derivative = (error - state.error) / TIME_DIFF;\n    const output =\n      config.p * error + config.i * integral + config.d * derivative;\n\n    setState((oldState) => {\n      return { ...oldState, error, integral, derivative, output };\n    });\n  }, [simulator.simTime]);\n\n  useEffect(() => {\n    simulator.setThrottle(Math.min(100, Math.max(0, state.output)));\n  }, [state.output]);\n\n  const setCoeficients = useCallback(\n    (config: PidConfig) => {\n      setState((oldState) => {\n        return { ...oldState, config };\n      });\n    },\n    [setState],\n  );\n\n  return {\n    ...state,\n    setCoeficients,\n  };\n}\n\n// if (simulator.speed > targetSpeed) {\n//   simulator.setThrottle(0);\n// } else if (simulator.speed < targetSpeed) {\n//   simulator.setThrottle(100);\n// }\n","import { differenceInSeconds } from 'date-fns';\nimport { useEffect, useMemo, useState } from 'react';\n\ninterface AdjustTimeState {\n  startTime: Date;\n  endTime?: Date;\n  hitCount: number;\n}\nexport function useAdjustTime(\n  targetSpeed: number,\n  currentSpeed: number,\n  simTime: number,\n) {\n  const [state, setState] = useState<AdjustTimeState>({\n    startTime: new Date(),\n    hitCount: 0,\n  });\n\n  useEffect(() => {\n    setState((oldState) => {\n      return {\n        ...oldState,\n        startTime: new Date(),\n        endTime: undefined,\n        hitCount: 0,\n      };\n    });\n  }, [targetSpeed]);\n\n  useEffect(() => {\n    if (Math.abs(targetSpeed - currentSpeed) < 0.5) {\n      setState((oldState) => {\n        const newState = {\n          ...oldState,\n          hitCount: oldState.hitCount + 1,\n        };\n        if (newState.hitCount === 1) {\n          newState.endTime = new Date();\n        }\n\n        return newState;\n      });\n    } else if (state.hitCount > 0) {\n      setState((oldState) => {\n        return { ...oldState, endTime: undefined, hitCount: 0 };\n      });\n    }\n  }, [simTime]);\n\n  const adjustingTime = useMemo(() => {\n    if (state.endTime) {\n      return differenceInSeconds(state.endTime, state.startTime);\n    }\n\n    return differenceInSeconds(new Date(), state.startTime);\n  }, [simTime]);\n  return { adjustingTime, hitCount: state.hitCount };\n}\n","import { Card } from 'antd';\nimport React, { useState } from 'react';\nimport { useDumbAutopilot } from '../domain/use-dumb-autopilot';\nimport { SimulatorHook } from '../domain/use-simulator';\nimport { TargetSpeedSetter } from './TargetSpeedSetter';\n\ninterface AutoPilotProps {\n  simulator: SimulatorHook;\n}\nexport function DumbAutoPilot({ simulator }: AutoPilotProps) {\n  const { speed } = simulator;\n\n  const [targetSpeed, setTargetSpeed] = useState(Math.floor(speed));\n\n  useDumbAutopilot(simulator, targetSpeed);\n\n  return (\n    <Card title=\"Dumb Autopilot\">\n      <TargetSpeedSetter\n        targetSpeed={targetSpeed}\n        changeSpeed={setTargetSpeed}\n      ></TargetSpeedSetter>\n    </Card>\n  );\n}\n","import { useEffect } from 'react';\nimport { SimulatorHook } from './use-simulator';\n\nexport function useDumbAutopilot(\n  simulator: SimulatorHook,\n  targetSpeed: number,\n) {\n  useEffect(() => {\n    if (simulator.speed > targetSpeed) {\n      simulator.setThrottle(0);\n    } else if (simulator.speed < targetSpeed) {\n      simulator.setThrottle(100);\n    }\n  }, [simulator.simTime]);\n}\n","import { Card, Radio, Slider, Space } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { usePersistConfig } from '../domain/use-persisted-config';\nimport { SimulatorHook } from '../domain/use-simulator';\nimport { AutoPilot } from './AutoPilot';\nimport { DumbAutoPilot } from './DumbAutoPilot';\n\ninterface ControlPanelProps {\n  simulator: SimulatorHook;\n}\nexport function ControlPanel({ simulator }: ControlPanelProps) {\n  const { throttle, setThrottle } = simulator;\n  const [controlMode, setControlMode] = useState(1);\n\n  usePersistConfig('control-mode', controlMode, setControlMode);\n\n  return (\n    <Space direction=\"vertical\">\n      <Card>\n        Mode:\n        <Radio.Group\n          onChange={(e) => setControlMode(e.target.value)}\n          value={controlMode}\n        >\n          <Radio value={1}>Manual</Radio>\n          <Radio value={2}>Dumb Autopilot</Radio>\n          <Radio value={3}>Autopilot</Radio>\n        </Radio.Group>\n        <Space style={{ width: '100%' }}>\n          Throttle:\n          <Slider\n            disabled={controlMode !== 1}\n            min={1}\n            max={100}\n            onChange={setThrottle}\n            value={throttle}\n            style={{ width: 200 }}\n          />\n        </Space>\n      </Card>\n      {controlMode === 2 && (\n        <DumbAutoPilot simulator={simulator}></DumbAutoPilot>\n      )}\n      {controlMode === 3 && <AutoPilot simulator={simulator}></AutoPilot>}\n    </Space>\n  );\n}\n","import { Button, Card, Slider, Space } from 'antd';\nimport React from 'react';\nimport { usePersistConfig } from '../domain/use-persisted-config';\nimport { SimulatorHook } from '../domain/use-simulator';\n\ninterface EnvironmentProps {\n  simulator: SimulatorHook;\n}\nexport function Environment({ simulator }: EnvironmentProps) {\n  const {\n    wind,\n    setWind,\n    angle,\n    setAngle,\n    horsePower,\n    setHorsePower,\n  } = simulator;\n\n  usePersistConfig('wind', wind, setWind);\n  usePersistConfig('angle', angle, setAngle);\n  usePersistConfig('horsePower', horsePower, setHorsePower);\n\n  return (\n    <Space direction=\"vertical\" style={{ width: '100%' }}>\n      <Card>\n        <Button onClick={() => simulator.setIsPaused(!simulator.isPaused)}>\n          {simulator.isPaused ? 'Continue' : 'Pause simulator'}\n        </Button>\n      </Card>\n      <Card>\n        Horse power: {horsePower}\n        <Slider\n          min={0}\n          max={400}\n          onChange={setHorsePower}\n          value={horsePower}\n          style={{ width: '100%' }}\n        />\n      </Card>\n      <Card>\n        Wind speed: {wind}\n        <Slider\n          min={0}\n          max={150}\n          onChange={setWind}\n          value={wind}\n          style={{ width: '100%' }}\n        />\n      </Card>\n      <Card>\n        Incline: {angle}\n        <Slider\n          min={-25}\n          max={+25}\n          onChange={setAngle}\n          value={angle}\n          style={{ width: '100%' }}\n        />\n      </Card>\n    </Space>\n  );\n}\n","import { ApexOptions } from 'apexcharts';\nimport { memo, useMemo } from 'react';\nimport ApexCharts from 'react-apexcharts';\nimport { INTERVAL } from '../domain/use-simulator';\nimport { useTrackHistory } from '../domain/use-tracking-history';\n\ninterface ChartProps {\n  simTime: number;\n  currentValue: number;\n  min?: number;\n  max?: number;\n  title: string;\n}\n\nfunction RealtimeChartPure(props: ChartProps) {\n  const { data } = useTrackHistory(props.simTime, props.currentValue);\n\n  const options: ApexOptions = useMemo(() => {\n    return {\n      chart: {\n        height: 350,\n        type: 'line',\n        animations: {\n          enabled: true,\n          easing: 'linear',\n          dynamicAnimation: {\n            speed: INTERVAL - 20,\n          },\n        },\n        toolbar: {\n          show: false,\n        },\n        zoom: {\n          enabled: false,\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n      stroke: {\n        curve: 'smooth',\n      },\n      title: {\n        text: props.title,\n        align: 'left',\n      },\n      markers: {\n        size: 0,\n      },\n      xaxis: {\n        type: 'numeric',\n        range: 100,\n        // range: XAXISRANGE,\n      },\n      yaxis: {\n        max: props.max,\n        min: props.min,\n      },\n      legend: {\n        show: false,\n      },\n    };\n  }, [props.title, props.min, props.max]);\n\n  const series = [\n    {\n      name: 'series-1',\n      data: data,\n    },\n  ];\n\n  return (\n    <ApexCharts options={options} series={series} type=\"line\" height={350} />\n  );\n}\n\nexport const RealtimeChart = memo(RealtimeChartPure, (prev, next) => {\n  return prev.simTime === next.simTime;\n});\n","import { useEffect, useState } from 'react';\n\nexport function useTrackHistory(simTime: number, value: number) {\n  const [data, setData] = useState([value]);\n\n  useEffect(() => {\n    setData((oldData) => {\n      const newData = [...oldData, Math.floor(value)];\n      return newData;\n    });\n  }, [simTime]);\n\n  return { data };\n}\n","import { Card, Space } from 'antd';\nimport React from 'react';\nimport { RealtimeChart } from './RealtimeChart';\nimport { SimulatorHook } from '../domain/use-simulator';\n\ninterface GraphicsProps {\n  simulator: SimulatorHook;\n}\nexport function Graphics({ simulator }: GraphicsProps) {\n  const { speed, simTime: time, throttle } = simulator;\n\n  return (\n    <Space direction=\"vertical\" style={{ width: '100%' }}>\n      <Card>\n        <RealtimeChart\n          title={'Speed: ' + Math.round(speed)}\n          simTime={time}\n          currentValue={speed}\n          min={0}\n          max={230}\n        />\n      </Card>\n      <Card>\n        <RealtimeChart\n          title={'Throttle: ' + Math.round(throttle)}\n          simTime={time}\n          currentValue={throttle}\n          min={0}\n          max={100}\n        />\n      </Card>\n    </Space>\n  );\n}\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport './App.css';\nimport { ControlPanel } from './components/ControlPanel';\nimport { Environment } from './components/Environment';\nimport { Graphics } from './components/Graphics';\nimport { useSimulator } from './domain/use-simulator';\n\nexport function App() {\n  const simulator = useSimulator();\n\n  return (\n    <Row gutter={12}>\n      <Col span={9}>\n        <ControlPanel simulator={simulator}></ControlPanel>\n      </Col>\n      <Col span={3}>\n        <Environment simulator={simulator}></Environment>\n      </Col>\n      <Col span={12}>\n        <Graphics simulator={simulator}></Graphics>\n      </Col>\n    </Row>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Layout, Menu } from 'antd';\nimport React from 'react';\n\nexport function MasterPage(props: any) {\n  return (\n    <Layout className=\"layout\">\n      <Layout.Header>\n        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\n          <Menu.Item key=\"1\">Welcome</Menu.Item>\n        </Menu>\n      </Layout.Header>\n      <Layout.Content style={{ padding: '12px' }}>\n        <div className=\"site-layout-content\">{props.children}</div>\n      </Layout.Content>\n    </Layout>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\nimport { MasterPage } from './MasterPage';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MasterPage>\n      <App />\n    </MasterPage>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}